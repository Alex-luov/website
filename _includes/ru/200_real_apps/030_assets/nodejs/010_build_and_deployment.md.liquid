Для сборки статики возьмем webpack.  Сейчас в приложении есть одна главная страница, доступная на
корневом маршруте `/`. Эта страница появилась со старта проекта. Ее содержимое лежит в файле
`/public/index.html`. В этом разделе мы добавим еще одну страницу, которая будет доступна по адресу
`/image`. Также мы реорганизуем структуру каталога `/public`, чтобы явно разделить его на две части:
страницы (`pages`) и подключаемые к страницам файлы (`assets`).

```shell
$ tree public
public/
├── assets
│   ├── images
│   │   └── werf-logo.svg
│   ├── javascripts
│   │   ├── image.js
│   │   └── index.js
│   └── stylesheets
│       ├── image.css
│       └── style.css
└── pages
    ├── image.html
    └── index.html
```


HTML-файлы будут служить нам шаблонами страниц. Страницы не будет кэшироваться, потому что они
всегда остаются доступными на постоянном маршруте (`/`, `/image`), и нам нужно их время от времени
менять и оперативно доносить изменения допользователей. Однако подключаемые файлы будут собираться
так, что их имена будут менятьcя в зависимости от их содержимого. Так можно будет достичь двух
целей: надолго кэшировать эти файлы в браузере и заодно свободно менять их. После сборки статики, в
каталоге `dist` будет такой результат:

```shell
$ tree dist/
├── css
│   ├── image.40428375b4e566574c8f.css
│   └── index.1e6f9f5ee05a92734053.css
├── image.html
├── index.html
├── js
│   ├── image.e67ef581c6705e6bd9a0.js
│   ├── index.e5a57023092221b727e0.js
│   └── runtime.f9a303951d184e8c1ce3.js
└── media
    └── 2c6aa8e8ef0b96213f30.svg
```

Чтобы собирать статику, мы добавили следующие модули

```shell
$ npm install --save-dev \
  webpack webpack-cli webpack-dev-middleware \
  html-webpack-plugin \
  css-loader mini-css-extract-plugin css-minimizer-webpack-plugin
```

- `webpack`, `webpack-cli` — собирать статику
- `webpack-dev-middleware` — отдавать статику приложением во время разработки
- `html-webpack-plugin` — генерировать HTML-страницы с динамическим подключением ассетов
- `css-loader` — задействовать CSS в сборке
- `mini-css-extract-plugin` — выделить CSS в отдельные файлы, чтобы кэшировать отдельно от JS
- `css-minimizer-webpack-plugin` — минифицировать CSS (работает с параметром `mode: "production"`)


- Plan
  - webpack config
  - docker config (note dist dir)
  - nginx config
  - werf config
  - deployment manifest
  - service manifest
  - ingress manifest
- Files
  * Changed
    * `package.json`
    * `app.js`
    * `Dockerfile`
    * `werf.yaml`
  * New
    * `.werf/`
    * `dist`
    * `webpack.config.js`
## Requirements

- CI system;

- Linux host to run CI jobs, with:

  * Shell Runner of your CI system of choice;

  * Bash;

  * Git version 2.18.0 or above;

  * GPG.

## Installing Buildah

To install Buildah, do the following on the host for running CI jobs:

* Install the Buildah package following the [official instructions](https://github.com/containers/buildah/blob/main/install.md) but refrain from configuring it. If there are no pre-made Buildah packages for your distribution, refer to the following guidelines:

  {% offtopic title="Installing Buildah  manually" %}

  - Install packages for `newuidmap` and `newgidmap`.

  - Make sure that `newuidmap` and `newgidmap` have the proper permissions set:

    ```yaml
    sudo setcap cap_setuid+ep /usr/bin/newuidmap
    sudo setcap cap_setgid+ep /usr/bin/newgidmap
    sudo chmod u-s,g-s /usr/bin/newuidmap /usr/bin/newgidmap
    ```

  - Install the package that provides the `/etc/subuid` and `/etc/subgid` files.

  - Make sure that the `/etc/subuid` and `/etc/subgid` files have a line similar to `runner:1000000:65536`, where

    - `runner` — name of the user to run the CI jobs;

    - `1000000` — first subUID/subGID in the allocated range;

    - `65536` — subUIDs/subGIDs range size (min `65536`).

    Avoid conflicts with other ranges, if any. Changing files may require a reboot. See `man subuid` and `man subgid` for details.

  {% endofftopic %}

* (For Linux 5.12 and below) Install the package that provides the `fuse-overlayfs` utility.

* Make sure the `/home/<user to run CI jobs>/.local/share/containers` path is created and the user to run CI jobs has read and write access.

* The `sysctl -ne kernel.unprivileged_userns_clone` command should NOT return `0`, otherwise run `echo 'kernel.unprivileged_userns_clone = 1' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

* The `sysctl -n user.max_user_namespaces` command should return `15000` or more, otherwise run `echo 'user.max_user_namespaces = 15000' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

## Installing werf

On the host for running CI jobs, run the following command to install werf:

```shell
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

## Configuring the container registry

[Enable garbage collection]({{ "/documentation/v1.2/usage/cleanup/cr_cleanup.html#container-registrys-garbage-collector" | relative_url }}) for your container registry.

## Preparing the system for multi-platform building

> This step is optional and only needed to build multi-platform images.

Register emulators on your system using qemu-user-static:

{% offtopic title="Using docker container" %}
```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes ; tail -f /dev/null"
```
{% endofftopic %}

{% offtopic title="Using DaemonSet in Kubernetes" %}
```yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: qemu-user-static
  labels:
    app: qemu-user-static
spec:
  selector:
    matchLabels:
      name: qemu-user-static
  template:
    metadata:
      labels:
        name: qemu-user-static
    spec:
      initContainers:
        - name: qemu-user-static
          image: multiarch/qemu-user-static
          args: ["--reset", "-p", "yes"]
          securityContext:
            privileged: true
      containers:
        - name: pause
          image: gcr.io/google_containers/pause
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 50m
              memory: 50Mi
```
{% endofftopic %}

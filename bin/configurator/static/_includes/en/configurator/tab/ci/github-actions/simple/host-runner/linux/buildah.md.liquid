## Requirements

* GitHub Actions;

* GitHub-hosted Linux Runner.

## Setting up a GitHub project

Save the kubeconfig file to access the Kubernetes cluster as a `KUBECONFIG_BASE64` [encrypted secret](https://docs.github.com/en/actions/security-guides/encrypted-secrets), pre-encoding it in Base64.

## Configuring a CI/CD project

Example of using werf with GitHub Actions:

```yaml
# .github/workflows/prod.yml:
name: prod
on:
  push:
    branches:
      - main

jobs:
  prod:
    name: prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: werf/actions/install@v1.2
        with:
          channel: stable

      - run: |
          source "$(werf ci-env github --as-file)"
          werf converge
        env:
          WERF_ENV: prod
          WERF_KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}
```

```yaml
# .github/workflows/cleanup.yml:
name: cleanup
on:
  schedule:
    - cron: '0 3 * * *'

jobs:
  cleanup:
    name: cleanup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: git fetch --prune --unshallow

      - uses: werf/actions/install@v1.2
        with:
          channel: stable

      - run: |
          source "$(werf ci-env github --as-file)"
          werf cleanup
        env:
          WERF_KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}
```

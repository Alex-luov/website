## Requirements

- GitLab;

- Linux host to run the GitLab Runner, featuring:

  - Bash;

  - Git version 2.18.0 or above;

  - GPG.

## Installing the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/install/linux-repository.html) to install the GitLab Runner on its host.

## Installing Buildah

Follow these steps on the GitLab Runner host to install Buildah:

* Install the Buildah package following the [official instructions](https://github.com/containers/buildah/blob/main/install.md), but refrain from configuring it. If there are no pre-made Buildah packages for your distribution, follow the guidelines below:

  {% offtopic title="Installing Buildah manually" %}

  - Install packages for `newuidmap` and `newgidmap`.

  - Make sure that `newuidmap` and `newgidmap` have the proper permissions:

    ```yaml
    sudo setcap cap_setuid+ep /usr/bin/newuidmap
    sudo setcap cap_setgid+ep /usr/bin/newgidmap
    sudo chmod u-s,g-s /usr/bin/newuidmap /usr/bin/newgidmap
    ```

  - Install the package that provides the `/etc/subuid` and `/etc/subgid` files.

  - Make sure that the `/etc/subuid` and `/etc/subgid` files have a line similar to `gitlab-runner:1000000:65536`, where

    * `gitlab-runner` — name of the GitLab Runner user;

    * `1000000` — the first subUID/subGID in the range to be allocated;

    * `65536` — subUIDs/subGIDs range size (min `65536`).

    Make sure there are no conflicts with other ranges, if any. Changing files may require a reboot. See `man subuid` and `man subgid` for details.

  {% endofftopic %}

* (Linux 5.12 and below) Install the package that provides the `fuse-overlayfs` utility.

* Make sure that the `/home/gitlab-runner/.local/share/containers` path is created and the `gitlab-runner` user has read and write access.

* The `sysctl -ne kernel.unprivileged_userns_clone` command should NOT return `0`, otherwise run `echo 'kernel.unprivileged_userns_clone = 1' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

* The `sysctl -n user.max_user_namespaces` command should return `15000` or more, otherwise run `echo 'user.max_user_namespaces = 15000' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

## Installing werf

To install werf, run the following command on the GitLab Runner host:

```
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

## Registering the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/register/index.html) to register GitLab Runner in GitLab; set Shell as the executor. Once the registration is complete, you may want to perform [additional GitLab Runner configuration](https://docs.gitlab.com/runner/configuration/advanced-configuration.html).

## Configuring the GitLab project

- Enable [Require a successful pipeline for merge requests](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html#require-a-successful-pipeline-for-merge).

- Enable the option to [auto-cancel redundant pipelines](https://docs.gitlab.com/ee/ci/pipelines/settings.html#auto-cancel-redundant-pipelines).

- [Create and save the access token](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token) to clean up the no longer needed images in the container registry with the following parameters:

  - **Token name:** `werf-images-cleanup`;

  - **Role:** `developer`;

  - **Scopes:** `api`.

- Add the following variables to the [project variables](https://docs.gitlab.com/ee/ci/variables/#for-a-project):

  - werf version:

    - **Key:** `WERF_VERSION`;

    - **Value:** `1.2 stable`;

  - Access token to clean up the unneeded images:

    - **Key:** `WERF_IMAGES_CLEANUP_PASSWORD`;

    - **Value:** `<"werf-images-cleanup" access token you saves earlier>`;

    - **Protect variable:** `yes`;

    - **Mask variable:** `yes`.

- [Add a scheduled nightly task](https://docs.gitlab.com/ee/ci/pipelines/schedules.html#add-a-pipeline-schedule) to clean up the no longer needed images in the container registry; set the `main`/`master` branch as the **Target branch**.

## Configuring the container registry

[Enable garbage collection](https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-garbage-collection) for your container registry.

## Configuring CI/CD of the project

Example of using werf with GitLab CI:

```yaml
# .gitlab-ci.yml:
stages:
- prod
- cleanup

variables:
  WERF_BUILDAH_MODE: auto

default:
  before_script:
  - source "$(~/bin/trdl use werf 1.2 stable)"
  - source "$(werf ci-env gitlab --as-file)"
  tags: ["<tag of the registered GitLab Runner>"]

prod:
  stage: prod
  script:
  - werf converge
  environment:
    name: prod
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
    when: manual

images:cleanup:
  stage: cleanup
  script:
    - werf cr login -u nobody -p "${WERF_IMAGES_CLEANUP_PASSWORD:?}" "${WERF_REPO:?}"
    - werf cleanup
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"
```

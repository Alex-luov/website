## Configuring GitLab project

- [Create and save access token](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token) to clean up the no longer needed images from the container registry with the following parameters:

  - **Token name:** `werf-images-cleanup`;

  - **Role:** `developer`;

  - **Scopes:** `api`.

- Add the following variables to the [project variables](https://docs.gitlab.com/ee/ci/variables/#for-a-project):

  - Access token to clean up the no longer needed images:

    - **Key:** `WERF_IMAGES_CLEANUP_PASSWORD`;

    - **Value:** `<"werf-images-cleanup" access token you saved earlier>`;

    - **Protect variable:** `yes`;

    - **Mask variable:** `yes`.

- [Add a scheduled nightly task](https://docs.gitlab.com/ee/ci/pipelines/schedules.html#add-a-pipeline-schedule) to clean up the no longer needed images in the container registry by setting the `main`/`master` branch as **Target branch**.

## Configuring CI/CD of the project

This is how the repository that uses werf for build and deploy might look:

<iframe src="https://codesandbox.io/embed/github/werf/examples/tree/main/ci-cd/simple/gitlab-ci-cd/docker-runner/linux/buildah?module=/.gitlab-ci.yml&codemirror=1&autoresize=1&fontsize=13&runonclick=1&theme=dark&view=editor&hidenavigation=1" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>

Extras:
  * Add authorization options for `werf cleanup` in the container registry by following [instructions]({{ "/documentation/v1.2/usage/cleanup/cr_cleanup.html#features-of-working-with-different-container-registries" | relative_url }}).

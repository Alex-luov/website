## Requirements

- GitLab;

- Host to install the GitLab Runner, with:

  * [Docker Engine](https://docs.docker.com/engine/install/).

## Installing the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/install/linux-repository.html) to install the GitLab Runner on its dedicated host.

## Registering the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/register/index.html) to register the GitLab Runner in GitLab; set Docker as the executor and any image as the image (e.g., `alpine`).

## Configuring the GitLab Runner

On the GitLab Runner host, open its `config.toml` configuration file and add the following options to the GitLab Runner you registered earlier:

```toml
[[runners]]
  name = <name of the registered Runner>
  [runners.docker]
    security_opt = ["seccomp:unconfined", "apparmor:unconfined"]
    volumes = ["/home/build/.werf"]
```

If the GitLab Runner host runs Linux kernel version 5.12 or lower, install `fuse` on the host and add one more option to the `config.toml` file:

```toml
[[runners]]
  name = <name of the registered Runner>
  [runners.docker]
    devices = ["/dev/fuse"]
```

You may also want to perform [additional configuration](https://docs.gitlab.com/runner/configuration/advanced-configuration.html) of the GitLab Runner.

## Configuring the GitLab project

- Enable [Require a successful pipeline for merge requests](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html#require-a-successful-pipeline-for-merge).

- Enable the option to [auto-cancel redundand pipelines](https://docs.gitlab.com/ee/ci/pipelines/settings.html#auto-cancel-redundant-pipelines).

- [Create and save the access token](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token) to clean up the no longer needed images in the container registry with the following parameters:

  - **Token name:** `werf-images-cleanup`;

  - **Role:** `developer`;

  - **Scopes:** `api`.

- Add the following variables to the [project variables](https://docs.gitlab.com/ee/ci/variables/#for-a-project):

  - werf version:

    - **Key:** `WERF_VERSION`;

    - **Value:** `{{ include.version }} {{ include.channel }}`;

  - Access token to clean up the no longer needed images:

    - **Key:** `WERF_IMAGES_CLEANUP_PASSWORD`;

    - **Value:** `<"werf-images-cleanup" access token you saved earlier>`;

    - **Protect variable:** `yes`;

    - **Mask variable:** `yes`.

- [Add a scheduled nightly task](https://docs.gitlab.com/ee/ci/pipelines/schedules.html#add-a-pipeline-schedule) to clean up the unneeded images in the container registry and set the `main`/`master` branch as the **Target branch**.

## Configuring the container registry

[Enable garbage collection]({{ "/documentation/v{{ include.version }}/usage/cleanup/cr_cleanup.html#automating-the-container-registry-cleanup" | relative_url }}) for your container registry.

## Configuring the CI/CD of the project

Example of using werf with GitLab CI:

```yaml
# .gitlab-ci.yml:
stages:
- prod
- cleanup

default:
  image:
    name: "registry.werf.io/werf/werf:{{ include.version }}-{{ include.channel }}-{{ include.werfImageDistro }}"
    pull_policy: always
  before_script:
  - source "$(werf ci-env gitlab --as-file)"
  tags: ["<tag of the registered GitLab Runner>"]

prod:
  stage: prod
  script:
  - werf converge
  environment:
    name: prod
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"
    when: manual

images:cleanup:
  stage: cleanup
  script:
    - werf cr login -u nobody -p "${WERF_IMAGES_CLEANUP_PASSWORD:?}" "${WERF_REPO:?}"
    - werf cleanup
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "schedule"
```

{% comment %}
TODO:
- ```
  image:
      name: "registry.werf.io/werf/werf:1.2-stable"
      pull_policy: always
  before_script:
  - source "$(werf ci-env gitlab --as-file)"
  ```
{% endcomment %}

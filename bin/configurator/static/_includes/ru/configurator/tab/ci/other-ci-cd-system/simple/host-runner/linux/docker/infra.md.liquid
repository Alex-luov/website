## Требования

* CI-система;

* Linux-хост для запуска CI-задач, имеющий:

  - Shell Runner вашей CI-системы;

  - Bash;

  - Git версии 2.18.0 или выше;

  - GPG;

  - [Docker Engine](https://docs.docker.com/engine/install/).

## Установка werf

Для установки werf, на хосте для запуска CI-задач выполните:

```shell
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

## Конфигурация container registry

[Включите сборщик мусора]({{ "/documentation/v1.2/usage/cleanup/cr_cleanup.html#%D1%81%D0%B1%D0%BE%D1%80%D1%89%D0%B8%D0%BA-%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0-container-registry" | relative_url }}) вашего container registry.

## Подготовка системы к мультиплатформенной сборке

> Данный шаг является опциональным и требуется только для сборки мультиплатформенных образов.

Регистрируем в системе эмуляторы с помощью образа qemu-user-static:

{% offtopic title="С помощью docker-контейнера" %}
```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes ; tail -f /dev/null"
```
{% endofftopic %}

{% offtopic title="С помощью DaemonSet в Kubernetes" %}
```yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: qemu-user-static
  labels:
    app: qemu-user-static
spec:
  selector:
    matchLabels:
      name: qemu-user-static
  template:
    metadata:
      labels:
        name: qemu-user-static
    spec:
      initContainers:
        - name: qemu-user-static
          image: multiarch/qemu-user-static
          args: ["--reset", "-p", "yes"]
          securityContext:
            privileged: true
      containers:
        - name: pause
          image: gcr.io/google_containers/pause
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 50m
              memory: 50Mi
```
{% endofftopic %}

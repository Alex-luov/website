## Требования

- GitLab;

- Хост для запуска GitLab Runner'а с предустановленными:

  * Bash;

  * Git версии 2.18.0 или новее;

  * GPG;

- [ArgoCD](https://argo-cd.readthedocs.io/en/stable/getting_started/#1-install-argo-cd).

## Установка GitLab Runner

Установите GitLab Runner на выделенный для него хост, следуя [официальным инструкциям](https://docs.gitlab.com/runner/install/linux-repository.html).

## Установка Buildah

Для установки Buildah выполните следующие действия на хосте с GitLab Runner'ом:

* Установите пакет Buildah, следуя [официальным инструкциям](https://github.com/containers/buildah/blob/main/install.md), но не настраивайте его. Если для вашего дистрибутива нет готовых пакетов Buildah, обратитесь к следующим рекомендациям:

  {% offtopic title="Как установить Buildah вручную" %}

  - Установите пакеты для `newuidmap` и `newgidmap`.

  - Убедитесь, что у `newuidmap` и `newgidmap` имеются соответствующие привилегии:

    ```yaml
    sudo setcap cap_setuid+ep /usr/bin/newuidmap
    sudo setcap cap_setgid+ep /usr/bin/newgidmap
    sudo chmod u-s,g-s /usr/bin/newuidmap /usr/bin/newgidmap
    ```

  - Установите пакет с файлами `/etc/subuid` и `/etc/subgid`.

  - Убедитесь, что в файлах `/etc/subuid` и `/etc/subgid` есть строка следующего вида `gitlab-runner:1000000:65536`. Здесь:

    * `gitlab-runner` — имя пользователя GitLab Runner;

    * `1000000` — первый subUID/subGID в выделяемом диапазоне;

    * `65536` — размер диапазона subUIDs/subGIDs (мин. `65536`).

    Убедитесь в отсутствии конфликтов с другими диапазонами, если таковые имеются. После изменения файлов может потребоваться перезагрузка. Подробнее см. `man subuid` и `man subgid`.

  {% endofftopic %}

* (Linux 5.12 и ниже) Установите пакет, предоставляющий утилиту `fuse-overlayfs`.

* Убедитесь, что путь `/home/gitlab-runner/.local/share/containers` создан, и пользователь `gitlab-runner` имеет доступ на чтение и запись.

* Команда `sysctl -ne kernel.unprivileged_userns_clone` НЕ должна возвращать `0`, в противном случае выполните команду `echo 'kernel.unprivileged_userns_clone = 1' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

* Команда `sysctl -n user.max_user_namespaces` НЕ должна возвращать `15000` или более, в противном случае выполните команду `echo 'user.max_user_namespaces = 15000' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

## Установка werf

Чтобы установить werf на хост GitLab Runner'а, выполните следующую команду:

```
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

## Регистрация GitLab Runner

Следуйте [официальным инструкциям](https://docs.gitlab.com/runner/register/index.html) по регистрации GitLab Runner'а в GitLab'е; укажите Shell в качестве исполнителя. После завершения регистрации может потребоваться [дополнительная настройка GitLab Runner'а](https://docs.gitlab.com/runner/configuration/advanced-configuration.html).

## Настройка реестра контейнеров

[Включите сборку мусора](https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-garbage-collection) в своем реестре контейнеров.

## Подготовка системы для кроссплатформенной cборки (опционально)

> Этот шаг необходим только если собираются образы для платформ, отличных от хост-платформы, на которой запущен werf.

С помощью qemu-user-static зарегистрируйте эмуляторы в системе:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```

## Установка ArgoCD Image Updater

Установите ArgoCD Image Updater с патчем ["continuous deployment of OCI Helm chart type application"](https://github.com/argoproj-labs/argocd-image-updater/pull/405):

```shell
kubectl apply -n argocd -f https://raw.githubusercontent.com/werf/3p-argocd-image-updater/master/manifests/install.yaml
```

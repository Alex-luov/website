## Requirements

- GitLab;

- Linux host to install the GitLab Runner, featuring:

  * Bash;

  * Git version 2.18.0 or above;

  * GPG;

- [ArgoCD](https://argo-cd.readthedocs.io/en/stable/getting_started/#1-install-argo-cd).

## Installing the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/install/linux-repository.html) to install the GitLab Runner on your dedicated host.

## Installing Buildah

Follow these steps on the GitLab Runner host to install Buildah:

* Install the Buildah package following the [official instructions](https://github.com/containers/buildah/blob/main/install.md) but avoid configuring it. If there are no ready-made Buildah packages for your distribution, refer to the following guidelines:

  {% offtopic title="Installing Buildah manually" %}

  - Install the packages for `newuidmap` and `newgidmap`.

  - Make sure that `newuidmap` and `newgidmap` have the proper permissions:

    ```yaml
    sudo setcap cap_setuid+ep /usr/bin/newuidmap
    sudo setcap cap_setgid+ep /usr/bin/newgidmap
    sudo chmod u-s,g-s /usr/bin/newuidmap /usr/bin/newgidmap
    ```

  - Install the package that provides the `/etc/subuid` and `/etc/subgid` files.

  - Make sure that the `/etc/subuid` and `/etc/subgid` files have a line similar to `gitlab-runner:1000000:65536`, where

    * `gitlab-runner` — name of the GitLab Runner user;

    * `1000000` — the first subUID/subGID in the range to be allocated;

    * `65536` — subUIDs/subGIDs range size (min `65536`).

    Make sure there are no conflicts with other ranges, if any. Changing files may require a reboot. See `man subuid` and `man subgid` for details.

  {% endofftopic %}

* (Linux 5.12 and below) Install the package that provides the `fuse-overlayfs` utility.

* Make sure that the `/home/gitlab-runner/.local/share/containers` path is created and the `gitlab-runner` user has read and write access.

* The `sysctl -ne kernel.unprivileged_userns_clone` command should NOT return `0`, otherwise run `echo 'kernel.unprivileged_userns_clone = 1' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

* The `sysctl -n user.max_user_namespaces` command should return `15000` or more, otherwise run `echo 'user.max_user_namespaces = 15000' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

## Installing werf

To install werf on the GitLab Runner host, run the following command:

```
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

## Registering the GitLab Runner

Follow [official instructions](https://docs.gitlab.com/runner/register/index.html) to register GitLab Runner in GitLab: set Shell as the executor. Once the registration is complete, you may want to perform [additional GitLab Runner configuration](https://docs.gitlab.com/runner/configuration/advanced-configuration.html).

## Configuring the container registry

[Enable garbage collection](https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-garbage-collection) for your container registry.

## Preparing the system for cross-platform building (optional)

> This step only needed to build images for platforms other than host platform running werf.

Register emulators on your system using qemu-user-static:

```shell
docker run --restart=always --name=qemu-user-static -d --privileged --entrypoint=/bin/sh multiarch/qemu-user-static -c "/register --reset -p yes && tail -f /dev/null"
```

## Installing ArgoCD Image Updater

Install ArgoCD Image Updater with the ["continuous deployment of OCI Helm chart type application" patch](https://github.com/argoproj-labs/argocd-image-updater/pull/405):

```shell
kubectl apply -n argocd -f https://raw.githubusercontent.com/werf/3p-argocd-image-updater/master/manifests/install.yaml
```

## Требования

- CI-система;

- Linux-хост для запуска CI-задач, имеющий:

  * Shell Runner вашей CI-системы;

  * Bash;

  * Git версии 2.18.0 или выше;

  * GPG.

## Установка Buildah

Для установки Buildah выполните следующие инструкции на хосте для запуска CI-задач:

- Установите пакет Buildah, следуя [официальным инструкциям](https://github.com/containers/buildah/blob/main/install.md), но не производите его дальнейшую настройку. Если для вашего дистрибутива нет готовых пакетов Buildah, используйте следующие инструкции:

  {% offtopic title="Ручная установка Buildah" %}

  - Установите пакеты, предоставляющие программы `newuidmap` и `newgidmap`.

  - Убедитесь, что программы `newuidmap` и `newgidmap` имеют корректные права:

    ```yaml
    sudo setcap cap_setuid+ep /usr/bin/newuidmap
    sudo setcap cap_setgid+ep /usr/bin/newgidmap
    sudo chmod u-s,g-s /usr/bin/newuidmap /usr/bin/newgidmap
    ```

  - Установите пакет, предоставляющий файлы `/etc/subuid` и `/etc/subgid`.

  - Убедитесь, что в файлах `/etc/subuid` и `/etc/subgid` имеется строка вида `runner:1000000:65536`, где:

    - `runner` — имя пользователя, из под которого запускаются CI-задачи;

    - `1000000` — первый subUID/subGID в выделяемом диапазоне;

    - `65536` — размер диапазона subUIDs/subGIDs (минимум `65536`).

    Избегайте коллизий с другими диапазонами, если они имеются. Изменение файлов может потребовать перезагрузки. Подробнее в `man subuid` и `man subgid`.

  {% endofftopic %}

- (Для Linux 5.12 и ниже) Установите пакет, предоставляющий программу `fuse-overlayfs`.

- Убедитесь, что путь `/home/<пользователь для запуска CI-задач>/.local/share/containers` создан, и пользователь, из под которого запускаются CI-задачи, имеет доступ на чтение и запись.

- Команда `sysctl -ne kernel.unprivileged_userns_clone` НЕ должна вернуть `0`, а иначе выполните `echo 'kernel.unprivileged_userns_clone = 1' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

- Команда `sysctl -n user.max_user_namespaces` должна вернуть `15000` или больше, а иначе выполните `echo 'user.max_user_namespaces = 15000' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.

## Установка werf

Для установки werf, на хосте для запуска CI-задач выполните:

```shell
curl -sSL https://werf.io/install.sh | bash -s -- --ci
```

## Конфигурация container registry

[Включите сборщик мусора]({{ "/documentation/v" | append: include.version | append: "/usage/cleanup/cr_cleanup.html#%D1%81%D0%B1%D0%BE%D1%80%D1%89%D0%B8%D0%BA-%D0%BC%D1%83%D1%81%D0%BE%D1%80%D0%B0-container-registry" | relative_url }}) вашего container registry.

## Конфигурация CI/CD проекта

Так может выглядеть запуск werf в вашей CI-системе:

```yaml
# .pseudo-ci-config.yml:
environment_variables:
  WERF_BUILDAH_MODE: auto
  WERF_REPO: registry.example.org/myrepo
  WERF_ENV: "${CI_ENVIRONMENT}"
  WERF_ENABLE_PROCESS_EXTERMINATOR: "1"

before_every_job:
- source "$(~/bin/trdl use werf {{ include.version }} {{ include.channel }})"
- werf cr login -u "${REGISTRY_USER:?}" -p "${REGISTRY_PASSWORD:?}" "${WERF_REPO:?}"

jobs:
  prod:
    commands:
    - werf converge
    environment: prod
    on: master
    how: manually

  images:cleanup:
    commands:
    - werf cleanup
    on: master
    how: daily
```

{% capture registry_guide_url %}/documentation/v{{ include.version }}/usage/cleanup/cr_cleanup.html#%D0%BE%D1%81%D0%BE%D0%B1%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-%D1%80%D0%B0%D0%B7%D0%BB%D0%B8%D1%87%D0%BD%D1%8B%D0%BC%D0%B8-container-registries{% endcapture %}
Дополнительно:
  * Добавьте для `werf cleanup` опции авторизации в container registry, следуя [инструкциям]({{ registry_guide_url | relative_url }}).
